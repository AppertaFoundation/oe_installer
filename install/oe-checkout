#!/bin/bash

git config core.fileMode false

if [[ -z "$1" ]] ; then
  echo "usage: $0 <branch> [-f]"
  echo "-f forces the checkout, even if local changes are uncommitted"
  exit 1
fi

source /etc/openeyes/modules.conf
dir=$PWD

#  If -f was not specified on the command line, then check each module
#  to see if any changes are unstaged.

if [ ! "$2" = "-f" ]; then
  changes=0
  modulelist=""
  cd /var/www/openeyes/protected/modules
  for module in ${modules[@]}; do
    if [ ! "$module" = "openeyes" ]; then cd $module; fi
    git diff --quiet
    if [ ! $? = 0 ]; then
      changes=1
      modulelist="$modulelist $module"
    fi
    if [ ! "$module" = "openeyes" ]; then cd ..; fi
  done

  cd  /var/www/openeyes/protected/javamodules/
  for module in ${javamodules[@]}; do
    cd $module;
    git diff --quiet
    if [ ! $? = 0 ]; then
      changes=1
      modulelist="$modulelist $module"
    fi
    cd ..
  done

  #  If we have unstaged changes, then abort and  warn which modules are affected
  if [ "$changes" = "1" ]; then
    printf "\e[41m\e[97m  CHECKOUT ABORTED  \e[0m \n"
    echo "There are uncommitted changes in the following modules: $modulelist"
    printf "To ignore these changes, run: \e[1m $0 $1 -f \e[0m \n"
    echo "Alternatively, manually git reset --hard to ignore, or git stash to keep, etc"
    printf "\e[41m\e[97m  CHECKOUT ABORTED  \e[0m \n";
    echo ""
    exit 1
  fi
fi


# Check out the PHP modules

cd /var/www/openeyes/protected/modules
for module in ${modules[@]}; do
  if [ ! "$module" = "openeyes" ] && [ ! -d "$module" ]; then
    printf "\e[31mModule $module not found\e[0m\n"
  else
    if [ ! "$module" = "openeyes" ]; then cd $module; fi
    printf "\e[32m$module: \e[0m"
    git reset --hard
    git fetch --all
    git checkout tags/$1 2>/dev/null
    if [ ! $? = 0 ]; then git checkout $1 2>/dev/null; fi
    if [ ! "$module" = "openeyes" ]; then cd ..; fi
  fi
done

# Check out the Java modules

cd /var/www/openeyes/protected/javamodules
for module in ${javamodules[@]}; do
  if [ ! -d "$module" ]; then
    printf "\e[31mModule $module not found\e[0m\n"
  else 
    cd $module
    git reset --hard
    git fetch --all
    git checkout tags/$1 2>/dev/null
    if [ ! $? = 0 ]; then git checkout $1 2>/dev/null; fi
    cd ..
  fi
done


# Now reset/relink various config files etc
oe-fix


cd "$dir"
printf "\e[42m\e[97m  CHECKOUT COMPLETE  \e[0m \n"
oe-which
echo If you need to run the database migrations, run oe-migrate
echo ""

