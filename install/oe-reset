#!/bin/bash

# DB connection variables
dbuser="root"
dbpassword="password"

# Process commandline parameters

nobanner=0
custombanner=0
custombranch=0
migrate=1
bannertext="Database reset at $(date)"
branch=0
defaultbranch="master"
demo=0
nofiles=0
showhelp=0
setpw=0

for i in "$@"
do
case $i in
	-nb|--no-banner) nobanner=1
		## Do not update the user banner after reset
		;;
	--no-migrate|-nm|--nomigrate) migrate=0
		## nomigrate will prevent database migrations from running automatically at the end of reset
		;;
	--banner) custombanner=1
		## Await custom banner text in next parameter
		;;
	--branch|-b) custombranch=1
		## Await branch name in next parameter
		;;
	--develop|-d) defaultbranch="develop"
		## when combined with --branch, will fallback to develop branch if named branch is not found
		;;
	--demo) demo=1
		## Install demo scripts (worklists, etc)
		;;
	--help) showhelp=1
		;;
	--no-files) nofiles=1
		;;
	-p) setpw=1
		## Use a different root password
		;;
	*)  if [ "$custombanner" = "1" ]; then bannertext=$i; custombanner=0; fi
			## Set banner text to custom input after reset

		if [ "$custombranch" = "1" ]; then branch=$i; custombranch=0; fi
			## reset to a new branch

		if [ "$setpw" = "1" ]; then dbpassword=$i; fi
			## Override DB password
		;;
esac
done

if [ $showhelp = 1 ]; then
    echo ""
    echo "DESCRIPTION:"
    echo "Resets database to latest 'sample' database"
    echo ""
    echo "usage: $0 [--branch | b branchname] [--help] [--no-migrate | -nm ] [--banner \"banner text\"] [--develop | -d] [ --no-banner | -nb ] [-p password]"
    echo ""
    echo "COMMAND OPTIONS:"
    echo "  --help         : Display this help text"
    echo "  --no-migrate "
    echo "          | -nm   : Prevent database migrations running automatically after"
    echo "                   checkout"
	echo "  --branch       : Download sample database on the specified branch"
	echo "          | -b      before resetting"
    echo "  --develop    "
    echo "          |-d    : If specified branch is not found, fallback to develop branch"
    echo "                   - default would fallback to master"
    echo "  --no-banner  "
	echo "          |-nb   : Remove the user banner text after resetting"
	echo "  --no-files     : Do not clear protected/files during reset"
    echo "  --banner>      : Set the user banner to the specified text after reset"
    echo "                   - default is 'Database reset at <time>'"
	echo "	-p			   : specify root password for mysql (default is \"password\")"
	echo "  --demo         : Install additional scripts to set up openeyes for demo"
	echo ""
    exit 1
fi


dir=$PWD

echo "Stopping dicom-file-watcher..."
sudo service dicom-file-watcher stop
if [ ! $? = 0 ]; then echo "dicom-file-watcher not running"; fi

if [ ! "$branch" = "0" ]; then
	## Checkout new sample database branch
	echo "Downloading database for $branch"

	cd /var/www/openeyes/protected/modules/sample

    sudo git reset --hard
	sudo git fetch --all

	sudo git checkout tags/$branch 2>/dev/null
	if [ ! $? = 0 ]; then sudo git checkout $branch 2>/dev/null; fi
	if [ ! $? = 0 ]; then echo "no branch $branch exists, switching to $defaultbranch"; sudo git checkout $defaultbranch 2>/dev/null; fi
    # fast-forward to head
	sudo git pull
fi

cd /var/www/openeyes/protected/modules/sample/sql

echo Clearing current database

echo "
drop database if exists openeyes;
create database openeyes;
grant all privileges on openeyes.* to 'openeyes'@'%' identified by 'openeyes';
flush privileges;
" > /tmp/openeyes-mysql-create.sql

mysql -u $dbuser "-p$dbpassword" < /tmp/openeyes-mysql-create.sql
rm /tmp/openeyes-mysql-create.sql

if [ $nofiles = "0" ]; then
	echo Deleting protected files
	sudo rm -rf /var/www/openeyes/protected/files/*
fi

echo "Re-importing database"
mysql -u $dbuser "-p$dbpassword" -D openeyes < openeyes_sample_data.sql

# Run pre-migration demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo/pre-migrate

	# import all demo sql scripts
	shopt -s nullglob
    for f in `ls *.sql | sort -V`
    do
		echo "importing $f"
		mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
    done

	# run demo setup scripts
	shopt -s nullglob
    for f in `ls *.sh | sort -V`
    do
		echo "running $f"
		sudo bash "./$f"
    done
fi

# Run migrations
if [ $migrate = "1" ]; then
	echo Performing database migrations
	oe-migrate -q
fi

# Run demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo

	# import all demo sql scripts
	shopt -s nullglob
    for f in `ls *.sql | sort -V`
    do
		echo "importing $f"
		mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
    done

	# run demo setup scripts
	shopt -s nullglob
    for f in `ls *.sh | sort -V`
    do
		echo "running $f"
		sudo bash "./$f"
    done
fi

# Run local post-migaration demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo/local-post

	# import all demo sql scripts
	shopt -s nullglob
    for f in `ls *.sql | sort -V`
    do
		echo "importing $f"
		mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
    done

	# run demo setup scripts
	shopt -s nullglob
    for g in `ls *.sh | sort -V`
    do
		echo "running $g"
		sudo bash "./$g"
    done
fi

# Set banner to confirm reset
if [ ! $nobanner = "1" ]; then
	echo "setting banner to: $bannertext"
	echo "
	use openeyes;
	UPDATE openeyes.setting_installation s SET s.value='$bannertext' WHERE s.key='watermark';
	" > /tmp/openeyes-mysql-setbanner.sql

	mysql -u $dbuser "-p$dbpassword" < /tmp/openeyes-mysql-setbanner.sql
	rm /tmp/openeyes-mysql-setbanner.sql
fi

oe-fix --no-compile --no-migrate --no-warn-migrate --no-restart --no-composer

echo "Starting dicom-file-watcher..."
sudo service dicom-file-watcher start

cd "$dir"
printf "\e[42m\e[97m  RESET COMPLETE  \e[0m \n"
echo ""
oe-which
