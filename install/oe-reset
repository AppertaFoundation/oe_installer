#!/bin/bash

# DB connection variables
dbuser="root"
dbpassword="password"

# Process commandline parameters

nobanner=0
custombanner=0
custombranch=0
migrate=1
bannertext="Database reset at $(date)"
branch=0
demo=0
nofiles=0
showhelp=0
setpw=0
usessh=0
checkoutparams="--sample-only --no-fix"
cleanbase=0
migrateparams="-q"
nofix=0

# Read in stored git config (username, root, usessh, etc)
#source /etc/openeyes/git.conf

for i in "$@"
do
case $i in
	-nb|--no-banner) nobanner=1
		## Do not update the user banner after reset
		;;
	--no-migrate|-nm|--nomigrate) migrate=0
		## nomigrate will prevent database migrations from running automatically at the end of reset
		;;
	--banner) custombanner=1
		## Await custom banner text in next parameter
		;;
	--branch|-b) custombranch=1
		## Await branch name in next parameter
		;;
	--demo) demo=1
		## Install demo scripts (worklists, etc)
		;;
	--help) showhelp=1
		;;
	--no-files) nofiles=1
		;;
	--genetics-enable)
		sudo bash /vagrant/install/add-genetics.sh
	;;
	--genetics-disable)
		sudo bash /vagrant/install/add-genetics.sh -r
	;;
	-p) setpw=1
		## Use a different root password
	;;
	--no-fix) nofix=1
		## do not run oe-fix (useful when calling from other scripts)
	;;
	--clean-base) cleanbase=1
		## Do not import base data (migrate from clean db instead)
	;;
	--ignore-warnings) migrateparams="$migrateparams $i"
		# Ignore warnings during migrate
	;;
	*)  if [ "$custombanner" = "1" ]; then
			bannertext=$i; custombanner=0;
			## Set banner text to custom input after reset
		elif [ "$custombranch" = "1" ]; then
			branch=$i; custombranch=0;
			## reset to a new branch
		elif [ "$setpw" = "1" ]; then
			dbpassword=$i;
			## Override DB password
		else
			# assume anything else will be passed through to the checkout commands
			checkoutparams="$checkoutparams $i"
		fi
		;;
esac
done

if [ $showhelp = 1 ]; then
    echo ""
    echo "DESCRIPTION:"
    echo "Resets database to latest 'sample' database"
    echo ""
    echo "usage: $0 [--branch | b branchname] [--help] [--no-migrate | -nm ] [--banner \"banner text\"] [--develop | -d] [ --no-banner | -nb ] [-p password] [--genetics-enable] [--genetics-disable]"
    echo ""
    echo "COMMAND OPTIONS:"
    echo "  --help         : Display this help text"
    echo "  --no-migrate "
    echo "          | -nm   : Prevent database migrations running automatically after"
    echo "                   checkout"
	echo "  --branch       : Download sample database on the specified branch"
	echo "          | -b      before resetting"
    echo "  --develop    "
    echo "          |-d    : If specified branch is not found, fallback to develop branch"
    echo "                   - default would fallback to master"
    echo "  --no-banner  "
	echo "          |-nb   : Remove the user banner text after resetting"
	echo "  --no-files     : Do not clear protected/files during reset"
    echo "  --banner>      : Set the user banner to the specified text after reset"
    echo "                   - default is 'Database reset at <time>'"
	echo "	-p			   : specify root password for mysql (default is \"password\")"
	echo "  --demo         : Install additional scripts to set up openeyes for demo"
	echo "  --genetics-enable"
	echo "                  : enable genetics modules (if currently diabled)"
	echo "  --genetics-disable"
	echo "                  : disable genetics modules (if currently enabled)"
	echo "	--clean-base	: Do not import sample data - migrate from clean db instead"
	echo "	--ignore-warnings	: Ignore warnings during migration"
	echo "	--no-fix		: do not run oe-fix routines after reset"
	echo ""
    exit 1
fi


dir=$PWD

# # Create correct user string to pass to github
# if [ ! -z $username ]; then
#     if [ ! -z $pass ]; then
# 		sshuserstring="$username"
#         httpuserstring="${username}:${pass}@"
#     else
# 		sshuserstring="$username"
#         httpuserstring="${username}@"
#     fi
# fi
#
# # Set base url string for cloning all repos
# basestring="https://${httpuserstring}github.com/$gitroot"
#
# # If using ssh, change the basestring to use ssh format
# if [ $usessh = 1 ]; then
# 	basestring="git@github.com:$gitroot"
# fi


echo "Stopping dicom-file-watcher..."
sudo service dicom-file-watcher stop
if [ ! $? = 0 ]; then echo "dicom-file-watcher not running"; fi

if [ ! "$branch" = "0" ]; then
	## Checkout new sample database branch
	echo "Downloading database for $branch"

    oe-checkout $branch $checkoutparams
fi

cd /var/www/openeyes/protected/modules/sample/sql

echo "Clearing current database"

echo "
drop database if exists openeyes;
create database openeyes;
grant all privileges on openeyes.* to 'openeyes'@'%' identified by 'openeyes';
flush privileges;
" > /tmp/openeyes-mysql-create.sql

mysql -u $dbuser "-p$dbpassword" < /tmp/openeyes-mysql-create.sql
rm /tmp/openeyes-mysql-create.sql

if [ $nofiles = "0" ]; then
	echo Deleting protected files
	sudo rm -rf /var/www/openeyes/protected/files/*
	sudo rm -rf /tmp/docman
fi

if [ $cleanbase = "0" ]; then
	echo "Re-importing database"
	mysql -u $dbuser "-p$dbpassword" -D openeyes < openeyes_sample_data.sql
fi

# Force default institution code to match common.php
icode=$(grep -oP '(?<=institution_code. => .).*?(?=.,)' /var/www/openeyes/protected/config/local/common.php)
if [ ! -z $icode ]; then

	echo "

	setting institution to $icode

	"

	echo "UPDATE institution SET remote_id = '$icode' WHERE id = 1;" > /tmp/openeyes-mysql-institute.sql

	mysql -uroot "-ppassword" -D openeyes < /tmp/openeyes-mysql-institute.sql

	rm /tmp/openeyes-mysql-institute.sql
fi

# Run pre-migration demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo/pre-migrate

	echo "RUNNING PRE_MIGRATION SCRIPTS..."

	shopt -s nullglob
	for f in `ls | sort -V`
	do
		if [[ $f == *.sql ]]; then
			echo "importing $f"
			sudo mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
		elif [[ $f == *.sh ]]; then
			echo "running $f"
			sudo bash "./$f"
		fi
	done
fi

# Run migrations
if [ $migrate = "1" ]; then
	echo Performing database migrations
	sudo oe-migrate $migrateparams
	echo "The following migrations were applied..."
	grep applied /etc/openeyes/migrate.log
fi

# Run demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo

	echo "RUNNING DEMO SCRIPTS..."

	shopt -s nullglob
	for f in `ls | sort -V`
	do
		if [[ $f == *.sql ]]; then
			echo "importing $f"
			sudo mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
		elif [[ $f == *.sh ]]; then
			echo "running $f"
			sudo bash "./$f"
		fi
	done
fi

# Run genetics scripts if genetics is enabled
if grep -q "'Genetics'," /var/www/openeyes/protected/config/local/common.php && ! grep -q "/\*'Genetics'," /var/www/openeyes/protected/config/local/common.php ; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo/genetics

	echo "RUNNING Genetics files..."

	shopt -s nullglob
    for f in `ls | sort -V`
    do
		if [[ $f == *.sql ]]; then
			echo "importing $f"
			sudo mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
		elif [[ $f == *.sh ]]; then
			echo "running $f"
			sudo bash "./$f"
		fi
    done

fi

# Set banner to confirm reset
if [ ! $nobanner = "1" ]; then
	echo "setting banner to: $bannertext"
	sudo echo "
	use openeyes;
	UPDATE openeyes.setting_installation s SET s.value='$bannertext' WHERE s.key='watermark';
	" > /tmp/openeyes-mysql-setbanner.sql

	sudo mysql -u $dbuser "-p$dbpassword" < /tmp/openeyes-mysql-setbanner.sql
	sudo rm /tmp/openeyes-mysql-setbanner.sql
fi

# Run local post-migaration demo scripts
if [ $demo = "1" ]; then
	cd /var/www/openeyes/protected/modules/sample/sql/demo/local-post

	echo "RUNNING POST RESET SCRIPTS..."

	shopt -s nullglob
    for f in `ls | sort -V`
    do
		if [[ $f == *.sql ]]; then
			echo "importing $f"
			sudo mysql -u $dbuser "-p$dbpassword" -D openeyes < $f
		elif [[ $f == *.sh ]]; then
			echo "running $f"
			sudo bash "./$f"
		fi
    done
fi

if [ ! $nofix = 1 ]; then
	oe-fix --no-compile --no-migrate --no-warn-migrate --no-restart --no-composer --no-permissions
fi

echo "Starting dicom-file-watcher..."
sudo service dicom-file-watcher start

cd "$dir"
printf "\e[42m\e[97m  RESET COMPLETE  \e[0m \n"
echo ""
oe-which
